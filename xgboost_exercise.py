# -*- coding: utf-8 -*-
"""תרגיל XGBoost רגרסיה.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1viB5FJAlZPuH_cPXmKnRqJ7LiecOA1Qi
"""

!pip install xlrd
#conda install -c anaconda xlrd

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from xgboost import XGBRegressor
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np
import pandas as pd

"""לחיזוי חוזק הבטון   
צרו שני מודלים
-  XGBRegressor
- רגרסיה לינארית סתמית ורגילה
- תשוו  mean_squared_error, r2_score
"""

import pandas as pd
url ='https://archive.ics.uci.edu/ml/machine-learning-databases/concrete/compressive/Concrete_Data.xls'

df = pd.read_excel(url)

#Target : df["Concrete compressive strength(MPa, megapascals) "]
df.head()

df.info()

X = df.drop(columns=["Concrete compressive strength(MPa, megapascals) "])
y = df["Concrete compressive strength(MPa, megapascals) "]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

xgp_model = XGBRegressor()
xgp_model.fit(X_train, y_train)
xgp_pred = xgp_model.predict(X_test)

lr = LinearRegression()
lr.fit(X_train, y_train)
lr_pred = lr.predict(X_test)

def evaluate_model(y_true, y_pred):
    mse = mean_squared_error(y_true, y_pred)
    r2 = r2_score(y_true, y_pred)
    return mse, r2

xgp_evaluate = evaluate_model(y_test, xgp_pred)
lr_evaluate = evaluate_model(y_test, lr_pred)

print("XGBRegressor MSE:", xgp_evaluate[0])
print("XGBRegressor R2:", xgp_evaluate[1])
print("LinearRegression MSE:", lr_evaluate[0])
print("LinearRegression R2:", lr_evaluate[1])

import matplotlib.pyplot as plt
loss_xgp = y_test-xgp_pred
loss_lr = y_test-lr_pred
plt.hist(loss_xgp, bins=20, alpha=0.6, label='XGBRegressor', color='blue', edgecolor = 'black')
plt.hist(loss_lr, bins=20, alpha=0.6, label='LinearRegression', color='red', edgecolor = 'black')
plt.legend()
plt.show()


print("Tal was here...")
